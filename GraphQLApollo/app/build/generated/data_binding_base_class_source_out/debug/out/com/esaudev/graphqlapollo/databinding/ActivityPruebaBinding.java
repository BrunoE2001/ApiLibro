// Generated by view binder compiler. Do not edit!
package com.esaudev.graphqlapollo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.esaudev.graphqlapollo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPruebaBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnConfirm;

  @NonNull
  public final RecyclerView recyclerViewPrueba;

  @NonNull
  public final TextView txtPruebaTotal;

  @NonNull
  public final TextView txtPruebaTotal2;

  private ActivityPruebaBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnConfirm,
      @NonNull RecyclerView recyclerViewPrueba, @NonNull TextView txtPruebaTotal,
      @NonNull TextView txtPruebaTotal2) {
    this.rootView = rootView;
    this.btnConfirm = btnConfirm;
    this.recyclerViewPrueba = recyclerViewPrueba;
    this.txtPruebaTotal = txtPruebaTotal;
    this.txtPruebaTotal2 = txtPruebaTotal2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPruebaBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPruebaBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_prueba, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPruebaBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnConfirm;
      Button btnConfirm = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirm == null) {
        break missingId;
      }

      id = R.id.recyclerViewPrueba;
      RecyclerView recyclerViewPrueba = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPrueba == null) {
        break missingId;
      }

      id = R.id.txtPruebaTotal;
      TextView txtPruebaTotal = ViewBindings.findChildViewById(rootView, id);
      if (txtPruebaTotal == null) {
        break missingId;
      }

      id = R.id.txtPruebaTotal2;
      TextView txtPruebaTotal2 = ViewBindings.findChildViewById(rootView, id);
      if (txtPruebaTotal2 == null) {
        break missingId;
      }

      return new ActivityPruebaBinding((ConstraintLayout) rootView, btnConfirm, recyclerViewPrueba,
          txtPruebaTotal, txtPruebaTotal2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
